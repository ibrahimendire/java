 pipeline {
        agent any
                        
     environment {
        
        SONAR_LOGIN_TOKEN = credentials('sonarqube-global-Secrete-text')
        SONAR_PASSWORD = credentials('sonarqube-password')
    }

                        stages {
                            stage('Test') {
                                steps {
                                    sh 'mvn test'
                                }
                            }
                            stage('Build') {
                                steps {
                                    sh 'mvn clean install'
                                }
                            }
                            
                            
                         stage('Test before sonarqube analysis'){
                              steps {                             
                               echo "It is working========================="
                               }
                             }
                             stage('from sq'){
                             steps{
                             mvn clean verify sonar:sonar \
  -Dsonar.projectKey=java \
  -Dsonar.host.url=http://localhost:1010 \
  -Dsonar.login=sqp_d0a6ebf708caad807e0287de0592866ba318bb4e
                             }
                             }
                             
                         
                             stage('SonarQube analysis') {
                               steps {
                                   withSonarQubeEnv('sonarqubeproduction-java-analysis') {
                                       sh "mvn sonar:sonar \
                                           -Dsonar.host.url=http://localhost:1010 \
                                           -Dsonar.projectKey=java \
                                           -Dsonar.login=${SONAR_LOGIN_TOKEN} \
                                           -Dsonar.projectName='java' \
                                           -Dsonar.projectVersion=1.0.0 \
                                           -Dsonar.java.binaries=target/classes"
                                   }
                               }
                           }

                            
                             
                             
        
                               stage('Test after sonarQube'){
                              steps {                             
                               echo "It looks like working========================="
                               }
                             }    
                                 

                        }
                       
                        
                              
                        /* post{
                                failure{
                                    
                                    
                                    slackSend( channel: "#ibrahim", token: "slack-jenkins-secret-key token", color: "danger", message: "Ibrahim sorry to hear that your Build is Failed: ${env.BUILD_DISPLAY_NAME} with Build ID: (${env.BUILD_ID}) ${custom_msg()}")
                                }
                                success {
                            slackSend(channel: "#ibrahim", 
                                    token: "slack-jenkins-secret-key token", 
                                    color: "good", 
                                    message: "Congragulation Ibrahim, Your Build is Succeeded: ${env.BUILD_DISPLAY_NAME} (${env.BUILD_ID})")
                        }
                            }
                            */
                    }

