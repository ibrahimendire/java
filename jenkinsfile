 pipeline {
        agent any
                        

                        stages {
                            stage('Test') {
                                steps {
                                    sh 'mvn test'
                                }
                            }
                            stage('Build') {
                                steps {
                                    sh 'mvn clean install'
                                }
                            }
                            
                            
                         stage('Test before sonarqube analysis'){
                              steps {                             
                               echo "It is working========================="
                               }
                             }
                             
                            stage(scann-1){ 
                             steps {
                                    withSonarQubeEnv('sonarqubeproduction-java-analysis') {
                                     
                                sh  "mvn clean verify sonar:sonar \
                                       -Dsonar.projectKey=java \
                                       -Dsonar.host.url=http://localhost:1010 \
                                       -Dsonar.login=java"
                                   }}}

                             stage('Test after scann'){
                              steps {                             
                               echo "It is ============working========================="
                               }
                             }
                             
                             
                             
                        stage('SonarQube analysis') {
                                
                                steps {
                                     withSonarQubeEnv('sonarqubeproduction-java-analysis') {
                                         sh "mvn sonar:sonar \
                                             -Dsonar.host.url=http://localhost:1010/projects \
                                             -Dsonar.projectKey=java \
                                             -Dsonar.login=$credentials('sonarqube-global-Secrete-text') \
                                             -Dsonar.projectName='java' \
                                             -Dsonar.projectVersion=1.0.0 \
                                             -Dsonar.java.binaries=target/classes/"
                                     }
                                 }

                                 }
                              
                              
                              
                               stage('Test after sonarQube'){
                              steps {                             
                               echo "It looks like working========================="
                               }
                             }    
                                 

                        }
                       
                        
                              
                        /* post{
                                failure{
                                    
                                    
                                    slackSend( channel: "#ibrahim", token: "slack-jenkins-secret-key token", color: "danger", message: "Ibrahim sorry to hear that your Build is Failed: ${env.BUILD_DISPLAY_NAME} with Build ID: (${env.BUILD_ID}) ${custom_msg()}")
                                }
                                success {
                            slackSend(channel: "#ibrahim", 
                                    token: "slack-jenkins-secret-key token", 
                                    color: "good", 
                                    message: "Congragulation Ibrahim, Your Build is Succeeded: ${env.BUILD_DISPLAY_NAME} (${env.BUILD_ID})")
                        }
                            }
                            */
                    }

